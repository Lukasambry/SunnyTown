name: Deploy to Preprod

on:
  push:
    branches: [preprod]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Preprod
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_PREPROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîÑ D√©ploiement Pr√©prod..."
            cd /home/florddev-preprod-sunnytown/htdocs/preprod.sunnytown.florddev.fr/

            # V√©rifier et installer l'extension PostgreSQL si n√©cessaire
            if ! php -m | grep -q pdo_pgsql; then
              echo "üì¶ Installation de l'extension PostgreSQL..."
              sudo apt update -qq
              sudo apt install -y php8.3-pgsql php8.3-pdo-pgsql
              sudo systemctl restart php8.3-fpm
            fi

            # Configuration Git s√©curis√©e
            git config --global --add safe.directory /home/florddev-preprod-sunnytown/htdocs/preprod.sunnytown.florddev.fr

            # Correction des permissions avant git reset pour √©viter les erreurs .gitignore
            sudo chown -R ${{ secrets.SSH_PREPROD_USER }}:florddev-preprod-sunnytown .
            sudo chmod -R 755 .

            # Reset Git propre
            git reset --hard HEAD
            git clean -fd
            git pull origin preprod

            # Permissions post-pull
            sudo chown -R ${{ secrets.SSH_PREPROD_USER }}:florddev-preprod-sunnytown .
            sudo chmod -R 755 .

            # Cr√©er les r√©pertoires storage n√©cessaires s'ils n'existent pas
            mkdir -p storage/logs storage/framework/cache storage/framework/sessions storage/framework/views
            mkdir -p bootstrap/cache

            # Permissions sp√©ciales pour storage et cache AVANT composer
            sudo chown -R www-data:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            # Composer install
            composer install --no-dev --optimize-autoloader --no-interaction

            # Node.js clean install
            sudo rm -rf node_modules package-lock.json
            npm install --omit=dev --silent
            npm run build

            # Permissions finales apr√®s build
            sudo chown -R www-data:www-data storage bootstrap/cache public/build
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod -R 755 public/build

            # Cr√©er le fichier de log Laravel s'il n'existe pas
            sudo touch storage/logs/laravel.log
            sudo chown www-data:www-data storage/logs/laravel.log
            sudo chmod 664 storage/logs/laravel.log

            # Laravel optimisations (avec gestion d'erreur)
            if php artisan config:cache; then
              echo "‚úÖ Config cached"
            else
              echo "‚ùå Erreur lors du cache config"
              exit 1
            fi

            if php artisan route:cache; then
              echo "‚úÖ Routes cached"
            else
              echo "‚ùå Erreur lors du cache routes"
              exit 1
            fi

            if php artisan view:cache; then
              echo "‚úÖ Views cached"
            else
              echo "‚ùå Erreur lors du cache views"
              exit 1
            fi

            # Migration (avec v√©rification de connexion DB)
            if php artisan migrate:status >/dev/null 2>&1; then
              php artisan migrate --force
              echo "‚úÖ Migrations execut√©es"
            else
              echo "‚ö†Ô∏è Base de donn√©es non accessible, migrations ignor√©es"
            fi

            echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
